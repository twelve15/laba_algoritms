from random import randint


def row():
    n = 26
    rows = [[2, 1], [3, 2], [3, 2], [2, 5], [1, 3], [3, 4], [4, 1], [1, 2], [5, 2], [2, 3], [3, 2], [1, 4], [3, 1], [4, 3],
            [1, 1], [2, 3], [4, 4], [2, 5], [5, 1], [4, 2], [1, 2], [1, 2], [2, 2], [4, 5], [1, 4], [1, 5]]
    global dep
    dep = [[] for _ in range(len(rows) + 1)]

    def order(i, j, mult, current):
        if i == j:
            dep[current].append(i)
            return
        order(i, mult[i][j], mult, current + 1)
        order(mult[i][j] + 1, j, mult, current + 1)
    d = []
    for i in range(len(rows)):
        d.append(rows[i][0])
    d.append(rows[-1][1])
    matrixes = [[[randint(1, 5) for _ in range(rows[j][1])] for _ in range(rows[j][0])] for j in range(len(rows))]
    c = [[float('inf') if i != j else 0 for j in range(len(rows)+1)] for i in range(len(rows)+1)]
    mult = [[0 for _ in range(len(rows) + 1)] for _ in range(len(rows) + 1)]
    for gap in range(1, len(rows)):
        for i in range(1, len(rows)):
            if i+gap < len(rows)+1:
                for k in range(i, i+gap):
                    current_value = c[i][k] + c[k + 1][i + gap] + d[i - 1] * d[k] * d[i + gap]
                    if current_value < c[i][i+gap]:
                        c[i][i+gap] = current_value
                        mult[i][i + gap] = k
    order(1, len(rows), mult, 1)
    print('Лучший возможный порядков:', end=' ')
    for i in dep[::-1]:
        for j in i:
            print(f'A{j}', end=' ')
    print(f'\nНаименьшее количество операций = {c[1][-1]}')


row()
